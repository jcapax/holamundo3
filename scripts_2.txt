DROP VIEW v_lista_movimiento;

CREATE VIEW v_lista_movimiento  AS  

select t.id_tipo_transaccion AS id_tipo_transaccion,t.clase_movimiento AS clase_movimiento,
        t.descripcion_tipo_transaccion AS descripcion_tipo_transaccion,t.fecha AS fecha,t.estado AS estado,
        t.valor_total AS valor_total,d.descripcion AS descripcion,d.simbolo AS simbolo,
        sum(d.cantidad) AS cantidad,sum(d.valor_total) AS valor_total_producto, t.id_lugar, l.descripcion as nombre_lugar 
from (v_transaccion t 
        join v_detalle_transaccion d on(t.id = d.id_transaccion)) 
        join lugar l on l.id = t.id_lugar
group by t.id_tipo_transaccion,t.clase_movimiento,t.descripcion_tipo_transaccion,t.fecha,t.estado,t.valor_total,d.descripcion,d.simbolo ;

****************************************************************

DELIMITER $$
CREATE FUNCTION f_get_detalle_credito(
    	_idTransaccion INT) 
RETURNS VARCHAR(150) NOT DETERMINISTIC NO SQL SQL SECURITY DEFINER 
BEGIN 
	DECLARE _detalle VARCHAR(150); 
    SET _detalle = (SELECT detalle FROM credito WHERE id_transaccion = _idTransaccion); 
    RETURN _detalle; 
END $$

****************************************************************

DROP VIEW v_caja;

CREATE VIEW v_caja  AS  
select t.id AS id_transaccion,c.fecha AS fecha_caja,c.importe * tt.tipo_movimiento AS importe_caja,
        c.estado AS estado,tt.descripcion AS movimiento,
        case t.id_tipo_transaccion
        	when 3 then f_get_detalle_credito(t.id)
            else t.descripcion_transaccion 
            end
        AS descripcion_transaccion,
        c.id_arqueo AS id_arqueo, t.id_lugar, l.descripcion as nombre_lugar
from caja c 
        join transaccion t on c.id_transaccion = t.id
        join tipo_transaccion tt on t.id_tipo_transaccion = tt.id 
        join lugar l on l.id = t.id_lugar;

*********************************************
*********************************************

DELIMITER $$
CREATE FUNCTION f_get_tipo_credito
	(_id_transaccion INT) 
RETURNS VARCHAR(40) NOT DETERMINISTIC NO SQL SQL SECURITY DEFINER 
BEGIN 
	DECLARE detalle VARCHAR(40); 
    DECLARE aux TINYINT;
	
	SET aux = (
		SELECT entrega_pendiente
		FROM credito
		WHERE id_transaccion = _id_transaccion); 
    
    IF aux = 1 then
    	SET detalle = 'PEDIDO CREDITO';
    ELSE
    	SET detalle = 'CREDITO EFECTIVO';
    END IF;
	RETURN detalle; 
END $$

*********************************************
*********************************************
drop view v_entrega_productos;

create view v_entrega_productos
AS

select tr.id AS id_transaccion,tr.fecha AS fecha,tr.usuario AS usuario,dt.id_producto AS id_producto, pr.descripcion AS nombre_producto,um.id AS id_unidad_medida, um.descripcion AS nombre_unidad_mendida,dt.cantidad AS cantidad, e.nro_entrega AS nro_entrega,e.id_transaccion AS id_transaccion_entrega 
from transaccion tr 
    join detalle_transaccion dt on tr.id = dt.id_transaccion 
    join producto pr on dt.id_producto = pr.id 
    join unidad_producto up on up.id_producto = pr.id and up.id_unidad_medida = dt.id_unidad_medida
    join unidad_medida um on um.id = up.id_unidad_medida 
    join entrega_transaccion e on tr.id = e.id_entrega_transaccion 
where tr.id_tipo_transaccion = 8 and tr.estado <> 'N' 
order by tr.id