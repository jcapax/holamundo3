CREATE VIEW v_entrega_productos
AS
SELECT tr.id as id_transaccion, tr.fecha, tr.usuario, 
    dt.id_producto, pr.descripcion as nombre_producto,
    um.id as id_unidad_medida, um.descripcion as nombre_unidad_mendida, dt.cantidad,
    nro_entrega, e.id_transaccion as  id_transaccion_entrega
FROM transaccion tr
    join detalle_transaccion dt on tr.id = dt.id_transaccion
    join producto pr ON dt.id_producto = pr.id
    join unidad_producto up ON up.id_producto = pr.id
    join unidad_medida um ON um.id = up.id_unidad_medida
    join entrega_transaccion e ON tr.id = e.id_entrega_transaccion
WHERE tr.id_tipo_transaccion = 8 and tr.estado <> 'N'
ORDER BY tr.id


create view v_creditos
as
select tr.id as id_transaccion, dt.id_producto, dt.descripcion as nombre_producto,
    dt.id_unidad_medida, dt.descripcion_medida as nombre_unidad_medida, dt.cantidad,
    c.nombre_completo, c.direccion, tr.fecha, tr.nro_tipo_transaccion,
    c.telefonos 
 from transaccion tr
    join v_detalle_transaccion dt on tr.id = dt.id_transaccion
    join credito p ON tr.id = p.id_transaccion
    join cliente_proveedor c on c.id = p.id_cliente_proveedor
where tr.id_tipo_transaccion = 3


create view v_entregas_pendientes
as
SELECT vp.id_transaccion as id_transaccion_credito, vp.id_producto, vp.nombre_completo, 
    vp.direccion, vp.telefonos, vp.fecha, vp.nro_tipo_transaccion,     
    vp.nombre_producto, vp.id_unidad_medida, vp.nombre_unidad_medida, vp.cantidad as cant_credito, 
    SUM(coalesce(ve.cantidad,0)) as cant_entrega,
    (vp.cantidad - SUM(coalesce(ve.cantidad,0))) AS diferencia
FROM v_creditos vp
    LEFT JOIN v_entrega_productos ve on vp.id_transaccion=ve.id_transaccion_entrega
         AND vp.id_unidad_medida = ve.id_unidad_medida
         AND vp.id_producto = ve.id_producto
GROUP BY vp.id_transaccion, vp.id_producto, vp.nombre_completo, 
    vp.direccion, vp.telefonos, vp.fecha, vp.nro_tipo_transaccion,     
    vp.nombre_producto, vp.id_unidad_medida, vp.nombre_unidad_medida, vp.cantidad 
HAVING (vp.cantidad - SUM(coalesce(ve.cantidad,0))) <> 0
ORDER BY vp.fecha DESC



ALTER TABLE `credito` ADD `entrega_pendiente` TINYINT NOT NULL DEFAULT '0' AFTER `detalle`;


drop view v_entrega_productos_pendientes

create view v_entrega_productos_pendientes
as
SELECT t.id, e.id_transaccion, t.fecha, t.nro_tipo_transaccion, 
	t.descripcion_transaccion, t.usuario, t.fecha_hora_registro, 
	d.id_producto, d.id_unidad_medida, d.descripcion nombre_producto, 
    d.simbolo, d.cantidad, d.valor_unitario, d.valor_total
FROM transaccion t 
	join entrega_transaccion e on t.id = e.id_entrega_transaccion
    join v_detalle_transaccion d on t.id = d.id_transaccion
where id_tipo_transaccion = 8 
	and e.id_transaccion in (select id_transaccion from credito where entrega_pendiente = 1)
order by t.id



CREATE FUNCTION `f_cantidad_entrega_transaccion`
	(`_id_transaccion` INT, `_id_producto` INT, `_id_unidad_medida` INT) 
RETURNS DOUBLE NOT DETERMINISTIC NO SQL SQL SECURITY DEFINER 
BEGIN 
	DECLARE cantidad_total DECIMAL(12,2); 
	SET cantidad_total = 0; 
	SET cantidad_total = (
		SELECT cantidad 
		FROM detalle_transaccion 
		WHERE id_transaccion = _id_transaccion AND 
			id_producto = _id_producto AND 
			id_unidad_medida = _id_unidad_medida); 
	RETURN cantidad_total; 
END 


CREATE FUNCTION `f_fecha_transaccion`(
    	`_idTransaccion` INT) 
RETURNS DATE NOT DETERMINISTIC NO SQL SQL SECURITY DEFINER 
BEGIN 
	DECLARE _fecha Date; 
    SET _fecha = (SELECT fecha FROM transaccion WHERE id = _idTransaccion); 
    RETURN _fecha; 
END